// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace gymapp.Migrations
{
    [DbContext(typeof(GymAppDbContext))]
    [Migration("20221222015300_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("HomeAdress")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "61181b81-daca-4589-a48d-fff2ac72fa8c",
                            Email = "admin@vietgym.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Bảo Anh",
                            HomeAdress = "Hồ Chí Minh",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@vietgym.com",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFO+xqSBx6b5A5TtizV2qm+mFrtL9petZQmTY6LvLTiQmX0fxBmtdRnmL5cmzdxQUg==",
                            PhoneNumber = "0866414791",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("App.Models.Classes.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<decimal>("ClassCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClassDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("RoomId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho nam giới",
                            InstructorId = 2,
                            PhotoUrl = "b9c58f58-94e1-45b8-a505-f708a9ce0366_blog-9.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 2,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho nữ giới",
                            InstructorId = 5,
                            PhotoUrl = "42d4ee61-d335-4972-8f4a-e7b6a92ad6a2_blog-4.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 3,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho người mới",
                            InstructorId = 15,
                            PhotoUrl = "31ecfa50-03e9-436a-9417-f2eafde632ab_blog-1.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 4,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm mỡ bụng",
                            InstructorId = 3,
                            PhotoUrl = "dc246325-4167-4c1e-869c-9bd8a6825787_blog-5.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 5,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm cân cấp tốc",
                            InstructorId = 6,
                            PhotoUrl = "ac083b6e-eaaa-401d-8902-9e12027f0bdd_blog-2.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 6,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm mỡ toàn thân",
                            InstructorId = 8,
                            PhotoUrl = "9c18a79d-b12b-41ed-ac5a-96f419b962f6_gallery-1.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 7,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Tăng chiều cao",
                            InstructorId = 1,
                            PhotoUrl = "14783d5f-bfba-493b-8e8a-927f1a20339e_gallery-4.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 8,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Tăng cường cơ bắp",
                            InstructorId = 1,
                            PhotoUrl = "7e6988ea-f5dd-4ef8-8f68-9e799f7e728b_gallery-7.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 9,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Phục hồi chức năng",
                            InstructorId = 1,
                            PhotoUrl = "134c6596-20d7-47e0-961c-b38df4868704_classes-5.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 10,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Khôi phuc vóc dáng sau sinh",
                            InstructorId = 1,
                            PhotoUrl = "041a2478-a9fc-4e3d-aaf6-2b2cd373ef15_classes-2.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 11,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Aerobic",
                            InstructorId = 1,
                            PhotoUrl = "7ce14930-948c-45d2-ae5d-d4440cb14ccf_classes-2.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 12,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho nam giới",
                            InstructorId = 20,
                            PhotoUrl = "dd071c8a-49e6-4ca1-8c15-a4c954f56ab6_classes-8.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 13,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho nữ giới",
                            InstructorId = 2,
                            PhotoUrl = "7812b275-1d64-4202-bf82-602dd0a64c4f_classes-1.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 14,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Gym cho người mới",
                            InstructorId = 5,
                            PhotoUrl = "f825cf9b-6ef5-4db8-b43e-e479f5ffbc49_classes-6.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 15,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm mỡ bụng",
                            InstructorId = 1,
                            PhotoUrl = "41f85a0f-8962-4383-83f6-ad668d0ce8a8_classes-9.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 16,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm cân cấp tốc",
                            InstructorId = 6,
                            PhotoUrl = "7b7985a5-9a32-4630-8e2a-783f81b5629d_classes-5.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 17,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Giảm mỡ toàn thân",
                            InstructorId = 8,
                            PhotoUrl = "db2f51e3-1d30-4ec4-a173-9ba802d44a56_classes-4.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 18,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Tăng chiều cao",
                            InstructorId = 1,
                            PhotoUrl = "1e4298c8-b920-4c79-9d91-913259651e85_classes-7.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 19,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Tăng cường cơ bắp",
                            InstructorId = 1,
                            PhotoUrl = "3bda819d-aa32-4783-885b-442e768874e5_classes-5.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 20,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Phục hồi chức năng",
                            InstructorId = 1,
                            PhotoUrl = "2662208d-fed5-401c-b5fe-89355ece2463_classes-2.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 21,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Khôi phuc vóc dáng sau sinh",
                            InstructorId = 3,
                            PhotoUrl = "5fe5ed6b-fa14-405f-ace0-3ef162381282_classes-1.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            ClassId = 22,
                            ClassCost = 500000m,
                            ClassDate = "20/12 - 27/12",
                            ClassPeriod = "10:00 - 11:30",
                            ClassTitle = "Aerobic",
                            InstructorId = 11,
                            PhotoUrl = "6f4edaf7-2a1d-4bd9-8e53-beca90f2cc58_classes-2.jpg",
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("App.Models.Classes.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expertise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1969, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muoinguyen@vietgym.com",
                            Expertise = "Aerobics",
                            Gender = "Nữ",
                            Name = "NGUYỄN VĂN MƯỜI",
                            Phone = "0909755904",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1966, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bonhuynh@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "HUỲNH VĂN BỐN",
                            Phone = "0919686705",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1968, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yenduong@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nữ",
                            Name = "DƯƠNG THỊ YẾN",
                            Phone = "0990737806",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1972, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baynguyen@vietgym.com",
                            Expertise = "Boxing",
                            Gender = "Nữ",
                            Name = "NGUYỄN THỊ BẢY",
                            Phone = "0961708507",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1966, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lianguyen@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "NGUYỄN VĂN LÍA",
                            Phone = "0981582908",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1967, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dongtruong@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nữ",
                            Name = "TRƯƠNG VĂN ĐÔNG",
                            Phone = "0918330410",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1967, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "daunguyen@vietgym.com08",
                            Expertise = "Boxing",
                            Gender = "Nữ",
                            Name = "NGUYỄN ĐẪU",
                            Phone = "0907117111",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1970, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoatran@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nữ",
                            Name = "TRẦN THỊ HÒA",
                            Phone = "0980976712",
                            Salary = 20000000m
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1972, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phungtran@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "TRẦN VIẾT PHỤNG",
                            Phone = "0919744214",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1969, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoale@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "LÊ THỊ LỆ HOA",
                            Phone = "0930393915",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1967, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "linhvo@vietgym.com",
                            Expertise = "Aerobics",
                            Gender = "Nữ",
                            Name = "VÕ KIM LINH",
                            Phone = "0908153717",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1968, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anle@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nam",
                            Name = "LÊ VĂN AN",
                            Phone = "0934833116",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(1966, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phuocnguyen@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nam",
                            Name = "NGUYỄN NHƯ PHƯỚC",
                            Phone = "0994750419",
                            Salary = 20000000m
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(1970, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haivo@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nam",
                            Name = "VÕ MINH HẢI",
                            Phone = "0941452818",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 15,
                            DateOfBirth = new DateTime(1964, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thutran@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "TRẦN THỊ THU",
                            Phone = "0952726521",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 16,
                            DateOfBirth = new DateTime(1960, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nynguyen@vietgym.com",
                            Expertise = "Dance",
                            Gender = "Nam",
                            Name = "NGUYỄN VĂN NY",
                            Phone = "0927438220",
                            Salary = 10000000m
                        },
                        new
                        {
                            Id = 17,
                            DateOfBirth = new DateTime(1967, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tamdoan@vietgym.com",
                            Expertise = "Boxing",
                            Gender = "Nam",
                            Name = "ĐOÀN VĂN TÂM",
                            Phone = "0927438220",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 18,
                            DateOfBirth = new DateTime(1967, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huongle@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "LÊ THỊ HƯƠNG",
                            Phone = "0925068222",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 19,
                            DateOfBirth = new DateTime(1966, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "duahuynh@vietgym.com ",
                            Expertise = "Boxing",
                            Gender = "Nữ",
                            Name = "HUỲNH THỊ ĐUA",
                            Phone = "0925068222",
                            Salary = 10000000m
                        },
                        new
                        {
                            Id = 20,
                            DateOfBirth = new DateTime(1968, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huyenbui@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "BÙI THỊ HUYỀN",
                            Phone = "0916596324",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 21,
                            DateOfBirth = new DateTime(1968, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tuyethuynh@vietgym.com",
                            Expertise = "Dance",
                            Gender = "Nữ",
                            Name = "HUỲNH THỊ TUYẾT",
                            Phone = "0945906825",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 22,
                            DateOfBirth = new DateTime(1967, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phungnguyen@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "NGUYỄN THỊ PHỤNG",
                            Phone = "0948331326",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 23,
                            DateOfBirth = new DateTime(1967, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mungpham@vietgym.com",
                            Expertise = "Aerobics",
                            Gender = "Nữ",
                            Name = "PHẠM THỊ MƯNG",
                            Phone = "0948331326",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 24,
                            DateOfBirth = new DateTime(1966, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tamphung@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nam",
                            Name = "PHÙNG VĂN TÁM",
                            Phone = "0928857527",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 25,
                            DateOfBirth = new DateTime(1965, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "xuanguyen@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nữ",
                            Name = "NGUYỄN THỊ XƯA",
                            Phone = "0928857517",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 26,
                            DateOfBirth = new DateTime(1967, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kiepnguyen@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "NGUYỄN THỊ KIỆP",
                            Phone = "0912703328",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 27,
                            DateOfBirth = new DateTime(1965, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hueung@vietgym.com",
                            Expertise = "Boxing",
                            Gender = "Nữ",
                            Name = "UNG THỊ HUỆ",
                            Phone = "0982323328",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 28,
                            DateOfBirth = new DateTime(1968, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "saunguyen@vietgym.com",
                            Expertise = "Gym",
                            Gender = "Nữ",
                            Name = "NGUYỄN THỊ SÁU THỊ SÁU",
                            Phone = "0122703328",
                            Salary = 15000000m
                        },
                        new
                        {
                            Id = 29,
                            DateOfBirth = new DateTime(1965, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huevo@vietgym.com",
                            Expertise = "Yoga",
                            Gender = "Nữ",
                            Name = "VÕ THỊ KIM HUỆ",
                            Phone = "0948331326",
                            Salary = 20000000m
                        });
                });

            modelBuilder.Entity("App.Models.Classes.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Capacity = 30,
                            RoomName = "A.01"
                        },
                        new
                        {
                            RoomId = 2,
                            Capacity = 50,
                            RoomName = "A.02"
                        },
                        new
                        {
                            RoomId = 3,
                            Capacity = 20,
                            RoomName = "A.03"
                        },
                        new
                        {
                            RoomId = 4,
                            Capacity = 80,
                            RoomName = "A.04"
                        },
                        new
                        {
                            RoomId = 5,
                            Capacity = 30,
                            RoomName = "A.05"
                        },
                        new
                        {
                            RoomId = 6,
                            Capacity = 40,
                            RoomName = "A.06"
                        },
                        new
                        {
                            RoomId = 7,
                            Capacity = 60,
                            RoomName = "A.07"
                        },
                        new
                        {
                            RoomId = 8,
                            Capacity = 30,
                            RoomName = "A.08"
                        },
                        new
                        {
                            RoomId = 9,
                            Capacity = 70,
                            RoomName = "A.09"
                        },
                        new
                        {
                            RoomId = 10,
                            Capacity = 50,
                            RoomName = "B.01"
                        },
                        new
                        {
                            RoomId = 11,
                            Capacity = 80,
                            RoomName = "B.02"
                        },
                        new
                        {
                            RoomId = 12,
                            Capacity = 50,
                            RoomName = "B.03"
                        },
                        new
                        {
                            RoomId = 13,
                            Capacity = 50,
                            RoomName = "B.04"
                        },
                        new
                        {
                            RoomId = 14,
                            Capacity = 20,
                            RoomName = "B.05"
                        },
                        new
                        {
                            RoomId = 15,
                            Capacity = 40,
                            RoomName = "B.06"
                        },
                        new
                        {
                            RoomId = 16,
                            Capacity = 80,
                            RoomName = "B.07"
                        },
                        new
                        {
                            RoomId = 17,
                            Capacity = 60,
                            RoomName = "B.08"
                        },
                        new
                        {
                            RoomId = 18,
                            Capacity = 30,
                            RoomName = "B.09"
                        },
                        new
                        {
                            RoomId = 19,
                            Capacity = 60,
                            RoomName = "C.01"
                        },
                        new
                        {
                            RoomId = 20,
                            Capacity = 30,
                            RoomName = "C.01"
                        });
                });

            modelBuilder.Entity("App.Models.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("App.Models.Memberships.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"), 1L, 1);

                    b.Property<string>("Bonus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            MembershipId = 4,
                            Bonus = "Ưu tiên xếp lớp",
                            Duration = 3,
                            Fee = 500000m,
                            Hours = 2,
                            Level = "Đồng"
                        },
                        new
                        {
                            MembershipId = 5,
                            Bonus = "Được sử dụng phòng tắm, và cá tiện ích gói trên",
                            Duration = 3,
                            Fee = 1000000m,
                            Hours = 3,
                            Level = "Bạc"
                        },
                        new
                        {
                            MembershipId = 6,
                            Bonus = "Có huấn luyện viên cá nhân, và cá tiện ích gói trên",
                            Duration = 3,
                            Fee = 30000000m,
                            Hours = 4,
                            Level = "Vàng"
                        });
                });

            modelBuilder.Entity("App.Models.Payments.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Q2QTLHJ401",
                            Percent = 5
                        },
                        new
                        {
                            Id = 2,
                            Code = "Z4VBROL202",
                            Percent = 5
                        },
                        new
                        {
                            Id = 3,
                            Code = "R0MMKGA003",
                            Percent = 5
                        },
                        new
                        {
                            Id = 4,
                            Code = "H6IFRNW004",
                            Percent = 5
                        },
                        new
                        {
                            Id = 5,
                            Code = "M5XHBVT605",
                            Percent = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "I4OPEJX206",
                            Percent = 5
                        },
                        new
                        {
                            Id = 7,
                            Code = "E5LLKGO207",
                            Percent = 5
                        },
                        new
                        {
                            Id = 8,
                            Code = "P4BMSJG608",
                            Percent = 5
                        },
                        new
                        {
                            Id = 9,
                            Code = "Z9BSUYY809",
                            Percent = 5
                        },
                        new
                        {
                            Id = 10,
                            Code = "S2KGNMD810",
                            Percent = 5
                        },
                        new
                        {
                            Id = 11,
                            Code = "Y4WUAMW811",
                            Percent = 5
                        },
                        new
                        {
                            Id = 12,
                            Code = "I1MWVIM912",
                            Percent = 5
                        },
                        new
                        {
                            Id = 13,
                            Code = "H3WWKLL813",
                            Percent = 5
                        },
                        new
                        {
                            Id = 14,
                            Code = "C7GFORG414",
                            Percent = 5
                        },
                        new
                        {
                            Id = 15,
                            Code = "K5KJVPS315",
                            Percent = 5
                        },
                        new
                        {
                            Id = 16,
                            Code = "U6BROHI716",
                            Percent = 5
                        },
                        new
                        {
                            Id = 17,
                            Code = "X4WFDAR217",
                            Percent = 5
                        },
                        new
                        {
                            Id = 18,
                            Code = "M3NIZFV318",
                            Percent = 5
                        },
                        new
                        {
                            Id = 19,
                            Code = "L4DGUVJ619",
                            Percent = 5
                        },
                        new
                        {
                            Id = 20,
                            Code = "X9XOJTR620",
                            Percent = 5
                        },
                        new
                        {
                            Id = 21,
                            Code = "F4CTPLZ421",
                            Percent = 5
                        },
                        new
                        {
                            Id = 22,
                            Code = "J6VHWGW422",
                            Percent = 5
                        },
                        new
                        {
                            Id = 23,
                            Code = "F6ZYLYU323",
                            Percent = 5
                        },
                        new
                        {
                            Id = 24,
                            Code = "O7WGRLR824",
                            Percent = 5
                        },
                        new
                        {
                            Id = 25,
                            Code = "A1XHZUD525",
                            Percent = 5
                        },
                        new
                        {
                            Id = 26,
                            Code = "L7VXFPZ226",
                            Percent = 5
                        },
                        new
                        {
                            Id = 27,
                            Code = "U5UBXJP727",
                            Percent = 5
                        },
                        new
                        {
                            Id = 28,
                            Code = "Q7RZSJF128",
                            Percent = 5
                        },
                        new
                        {
                            Id = 29,
                            Code = "E9YGYAS029",
                            Percent = 5
                        },
                        new
                        {
                            Id = 30,
                            Code = "M0NHSOR730",
                            Percent = 5
                        },
                        new
                        {
                            Id = 31,
                            Code = "Z5UWPAC931",
                            Percent = 5
                        },
                        new
                        {
                            Id = 32,
                            Code = "M2WNCKA432",
                            Percent = 5
                        },
                        new
                        {
                            Id = 33,
                            Code = "O7LGIUA533",
                            Percent = 5
                        },
                        new
                        {
                            Id = 34,
                            Code = "I3UHOBO634",
                            Percent = 5
                        },
                        new
                        {
                            Id = 35,
                            Code = "P1PKUFX435",
                            Percent = 5
                        },
                        new
                        {
                            Id = 36,
                            Code = "J9HRPEK936",
                            Percent = 5
                        },
                        new
                        {
                            Id = 37,
                            Code = "N2YVKJG837",
                            Percent = 5
                        },
                        new
                        {
                            Id = 38,
                            Code = "C9SJLPI138",
                            Percent = 5
                        },
                        new
                        {
                            Id = 39,
                            Code = "V6UCLLH439",
                            Percent = 5
                        },
                        new
                        {
                            Id = 40,
                            Code = "R3PEANZ640",
                            Percent = 5
                        },
                        new
                        {
                            Id = 41,
                            Code = "D4DHJYY741",
                            Percent = 5
                        },
                        new
                        {
                            Id = 42,
                            Code = "W7OFVKE042",
                            Percent = 5
                        },
                        new
                        {
                            Id = 43,
                            Code = "T7QMCWP843",
                            Percent = 5
                        },
                        new
                        {
                            Id = 44,
                            Code = "R6XCMVL144",
                            Percent = 5
                        },
                        new
                        {
                            Id = 45,
                            Code = "P7NLCSV945",
                            Percent = 5
                        },
                        new
                        {
                            Id = 46,
                            Code = "C6ZLXUW846",
                            Percent = 5
                        },
                        new
                        {
                            Id = 47,
                            Code = "Y4SHNFC447",
                            Percent = 5
                        },
                        new
                        {
                            Id = 48,
                            Code = "N9HOOXK148",
                            Percent = 5
                        },
                        new
                        {
                            Id = 49,
                            Code = "O4NBFXN149",
                            Percent = 5
                        },
                        new
                        {
                            Id = 50,
                            Code = "O5YYVEZ450",
                            Percent = 5
                        },
                        new
                        {
                            Id = 51,
                            Code = "K1HYHTL451",
                            Percent = 10
                        },
                        new
                        {
                            Id = 52,
                            Code = "O9IKYGO052",
                            Percent = 10
                        },
                        new
                        {
                            Id = 53,
                            Code = "J6KFNAP653",
                            Percent = 10
                        },
                        new
                        {
                            Id = 54,
                            Code = "H7TQVVM054",
                            Percent = 10
                        },
                        new
                        {
                            Id = 55,
                            Code = "X6IJXCK655",
                            Percent = 10
                        },
                        new
                        {
                            Id = 56,
                            Code = "S0BJAKQ757",
                            Percent = 10
                        },
                        new
                        {
                            Id = 57,
                            Code = "U1CWCOF258",
                            Percent = 10
                        },
                        new
                        {
                            Id = 58,
                            Code = "W1MFNUV359",
                            Percent = 10
                        },
                        new
                        {
                            Id = 59,
                            Code = "T1CRMIE960",
                            Percent = 10
                        },
                        new
                        {
                            Id = 60,
                            Code = "R3MHXHI061",
                            Percent = 10
                        },
                        new
                        {
                            Id = 61,
                            Code = "C1WRHPY362",
                            Percent = 10
                        },
                        new
                        {
                            Id = 62,
                            Code = "H3SQAKC463",
                            Percent = 10
                        },
                        new
                        {
                            Id = 63,
                            Code = "J4WZPUF964",
                            Percent = 10
                        },
                        new
                        {
                            Id = 64,
                            Code = "D7MJCTV065",
                            Percent = 10
                        },
                        new
                        {
                            Id = 65,
                            Code = "H1JWFNA766",
                            Percent = 10
                        },
                        new
                        {
                            Id = 66,
                            Code = "V1OFGMV967",
                            Percent = 10
                        },
                        new
                        {
                            Id = 67,
                            Code = "H4FDRFU768",
                            Percent = 10
                        },
                        new
                        {
                            Id = 68,
                            Code = "B2NVTYU469",
                            Percent = 10
                        },
                        new
                        {
                            Id = 69,
                            Code = "K9BTMDE770",
                            Percent = 10
                        },
                        new
                        {
                            Id = 70,
                            Code = "T9EAIIA471",
                            Percent = 10
                        },
                        new
                        {
                            Id = 71,
                            Code = "L5OZWIP472",
                            Percent = 10
                        },
                        new
                        {
                            Id = 72,
                            Code = "F7AVIYC073",
                            Percent = 10
                        },
                        new
                        {
                            Id = 73,
                            Code = "P1LYLYU374",
                            Percent = 10
                        },
                        new
                        {
                            Id = 74,
                            Code = "F1RJTIG275",
                            Percent = 10
                        },
                        new
                        {
                            Id = 75,
                            Code = "M0VSVEL376",
                            Percent = 10
                        },
                        new
                        {
                            Id = 76,
                            Code = "T2LPATP477",
                            Percent = 10
                        },
                        new
                        {
                            Id = 77,
                            Code = "O2TCIQP878",
                            Percent = 10
                        },
                        new
                        {
                            Id = 78,
                            Code = "V2OWXLA979",
                            Percent = 10
                        },
                        new
                        {
                            Id = 79,
                            Code = "S7LXPOT080",
                            Percent = 10
                        },
                        new
                        {
                            Id = 80,
                            Code = "Y1YEKDE481",
                            Percent = 10
                        },
                        new
                        {
                            Id = 81,
                            Code = "O1KANNG982",
                            Percent = 10
                        },
                        new
                        {
                            Id = 82,
                            Code = "U3YJGVE883",
                            Percent = 10
                        },
                        new
                        {
                            Id = 83,
                            Code = "K7FSTQB784",
                            Percent = 10
                        },
                        new
                        {
                            Id = 84,
                            Code = "Y0JJMZF485",
                            Percent = 10
                        },
                        new
                        {
                            Id = 85,
                            Code = "X2KLFRO886",
                            Percent = 10
                        },
                        new
                        {
                            Id = 86,
                            Code = "L5NIBJE287",
                            Percent = 10
                        },
                        new
                        {
                            Id = 87,
                            Code = "X8RSTXB888",
                            Percent = 10
                        },
                        new
                        {
                            Id = 88,
                            Code = "R2JTLWV889",
                            Percent = 10
                        },
                        new
                        {
                            Id = 89,
                            Code = "W5SURHV490",
                            Percent = 20
                        },
                        new
                        {
                            Id = 90,
                            Code = "B6AJJHA091",
                            Percent = 20
                        },
                        new
                        {
                            Id = 91,
                            Code = "S0ZFFTD292",
                            Percent = 20
                        },
                        new
                        {
                            Id = 92,
                            Code = "K7CAKCQ193",
                            Percent = 20
                        },
                        new
                        {
                            Id = 93,
                            Code = "X7CQJTD794",
                            Percent = 20
                        },
                        new
                        {
                            Id = 94,
                            Code = "F6SMWTI295",
                            Percent = 20
                        },
                        new
                        {
                            Id = 95,
                            Code = "X1TTIQQ796",
                            Percent = 20
                        },
                        new
                        {
                            Id = 96,
                            Code = "Y7MOOJD997",
                            Percent = 20
                        },
                        new
                        {
                            Id = 97,
                            Code = "D7YIYRO998",
                            Percent = 20
                        },
                        new
                        {
                            Id = 98,
                            Code = "Z5FUNZS799",
                            Percent = 20
                        },
                        new
                        {
                            Id = 99,
                            Code = "O4MAHTL356",
                            Percent = 20
                        });
                });

            modelBuilder.Entity("App.Models.Payments.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentID");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("App.Models.Payments.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PaymentID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("App.Models.Payments.SignupClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignupDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassId", "UserId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("SignupClasses");
                });

            modelBuilder.Entity("App.Models.Payments.SignupMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignupDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MembershipId", "UserId", "PaymentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("SignupMemberships");
                });

            modelBuilder.Entity("App.Models.Products.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dần dần mọi người đã ý thức được việc tập thể dục thể thao quan trọng thế nào trong cuộc sống hàng khi Covid đến, ai cũng mong muốn mình có một thể trạng sức khỏe tốt để có thể đấu tranh với bệnh tật vây quanh ta mỗi ngày. Có rất nhiều phương pháp để tập luyện như tập Gym, chạy bộ, bơi lội, đá bóng để có thể rèn luyện sức khỏe của bản thân. Nhưng đi kèm với đó, để có thể tập luyện một cách dễ dàng, hiệu quả và tránh những rủi ro không đáng có trong tập luyện nhất thì chắc chắn bạn không thể thiếu những trợ thủ đắc lực của mình đó chính là những phụ kiện thể thao, tập gym.  Tại thời điểm hiện tại, phụ kiện thể thao tập gym rất đa dạng, có nhiều mẫu mã và mỗi sản phẩm đều chứa một công dụng và lợi ích khác nhau giúp hỗ trợ tập luyện hiệu quả. Cũng chính vì điều này, đặc biệt là với những người mới chơi thể thao đều cân nhắc đắn đo khi lựa chọn các loại phụ kiện thể thao, tập gym phù hợp nhất với mình. Cho nên, Gymstore luôn cố gắng đưa cho bạn những lựa chọn tốt nhất để có thể mua các sản phẩm phụ kiện thể thao, tập gym chính hãng, uy tín giá tốt nhất có thể. ",
                            Slug = "phu-kien-the-thao",
                            Title = "Phụ kiện thể thao"
                        },
                        new
                        {
                            Id = 2,
                            Description = "HỖ TRỢ ĐỐT MỠ là các sản phẩm có công thức mạnh mẽ trong việc tăng khả năng sinh nhiệt của cơ thể, hỗ trợ khả năng đốt cháy chất béo tự nhiên. Với một số chất nổi bật như CLA, L-Carnitine, Yohimbine, Green Tea Extract ",
                            Slug = "ho-tro-giam-mo",
                            Title = "Hỗ Trợ Giảm Mỡ"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sức Khỏe Toàn Diện",
                            Slug = "suc-khoe-toan-dien",
                            Title = "Sức Khỏe Toàn Diện"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sữa Tăng Cân Mass Gainer là dòng sữa tăng cân cho người gầy hỗ trợ bổ sung hàm lượng lớn Calories từ Protein, Carb, Fat, các Vitamin và khoáng chất hỗ trợ cho người gầy tăng cân dễ dàng và hiệu quả. Sữa tăng cân mass gainer có ưu điểm phù hợp với nhiều đối tượng khác nhau, sản phẩm chủ yếu hỗ trợ tăng cân cho người lớn, người tập Gym muốn tăng cân hiệu quả.",
                            Slug = "sua-tang-can",
                            Title = "Sữa tăng cân"
                        });
                });

            modelBuilder.Entity("App.Models.Products.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6453),
                            Description = "Đai lưng đeo tạ",
                            Price = 850000m,
                            ProductName = "Đai lưng đeo tạ Harbinger PolyPro Dip Belt With Chain",
                            Slug = "dai-lung-deo-ta-harbinger-polypro-dip-belt-with-chain"
                        },
                        new
                        {
                            ProductID = 2,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6463),
                            Description = "Đai lưng đeo tạ",
                            Price = 800000m,
                            ProductName = "Đai lưng Gofit Leather Lifting Belt, 6 Inch",
                            Slug = "dai-lung-gofit-leather-lifting-belt-6-inch"
                        },
                        new
                        {
                            ProductID = 3,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 3,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6465),
                            Description = "Đai lưng đeo tạ",
                            Price = 760000m,
                            ProductName = "Harbinger Lifting Grips",
                            Slug = "harbinger-lifting-grips"
                        },
                        new
                        {
                            ProductID = 4,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6466),
                            Description = "Đai lưng đeo tạ",
                            Price = 750000m,
                            ProductName = "Harbinger 6\" Padded Leather Belt",
                            Slug = "harbinger-6-padded-leather-belt"
                        },
                        new
                        {
                            ProductID = 5,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6468),
                            Description = "Đai lưng đeo tạ",
                            Price = 710000m,
                            ProductName = "Harbinger Training Grip Wristwrap Weightlifting Gloves, Black/Grey",
                            Slug = "harbinger-training-grip-wristwrap-weightlifting-gloves-blackgrey"
                        },
                        new
                        {
                            ProductID = 6,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 3,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6469),
                            Description = "Đai lưng đeo tạ",
                            Price = 700000m,
                            ProductName = "Harbinger Flexfit Contour Belt Red, 6 inch",
                            Slug = "harbinger-flexfit-contour-belt-red-6-inch"
                        },
                        new
                        {
                            ProductID = 7,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6471),
                            Description = "Đai lưng đeo tạ",
                            Price = 700000m,
                            ProductName = "Harbinger 4\" Padded Leather Belt",
                            Slug = "harbinger-4-padded-leather-belt"
                        },
                        new
                        {
                            ProductID = 8,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6472),
                            Description = "Đai lưng đeo tạ",
                            Price = 1800000m,
                            ProductName = "Labrada Muscle Mass Gainer 12 Lbs (5443 g)",
                            Slug = "labrada-muscle-mass-gainer-12-lbs-5443-g"
                        },
                        new
                        {
                            ProductID = 9,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6473),
                            Description = "Đai lưng đeo tạ",
                            Price = 1600000m,
                            ProductName = "Applied Critical Mass Original, 6KG (25 Servings)",
                            Slug = "applied-critical-mass-original-6kg-25-servings"
                        },
                        new
                        {
                            ProductID = 10,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6475),
                            Description = "Đai lưng đeo tạ",
                            Price = 1850000m,
                            ProductName = "Kevin Levrone GOLD Lean Mass, 6 KG (30 Servings)",
                            Slug = "kevin-levrone-gold-lean-mass-6-kg-30-servings"
                        },
                        new
                        {
                            ProductID = 11,
                            AuthorId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            CategoryID = 2,
                            Content = "",
                            DateCreated = new DateTime(2022, 12, 22, 8, 53, 0, 408, DateTimeKind.Local).AddTicks(6476),
                            Description = "Đai lưng đeo tạ",
                            Price = 600000m,
                            ProductName = "AP Sports Regimen L-Carnitine 3000mg, 31 Servings",
                            Slug = "ap-sports-regimen-l-carnitine-3000mg-31-servings"
                        });
                });

            modelBuilder.Entity("App.Models.Products.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductPhoto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "gbcrunmg.webp",
                            ProductID = 1
                        },
                        new
                        {
                            Id = 2,
                            FileName = "ndhktb2h.webp",
                            ProductID = 2
                        },
                        new
                        {
                            Id = 3,
                            FileName = "lvbpl5hk.webp",
                            ProductID = 2
                        },
                        new
                        {
                            Id = 4,
                            FileName = "mzkvjbag.webp",
                            ProductID = 2
                        },
                        new
                        {
                            Id = 5,
                            FileName = "t3ts2ibq.webp",
                            ProductID = 3
                        },
                        new
                        {
                            Id = 6,
                            FileName = "wcan2qsl.webp",
                            ProductID = 4
                        },
                        new
                        {
                            Id = 7,
                            FileName = "0cas3lpe.webp",
                            ProductID = 5
                        },
                        new
                        {
                            Id = 8,
                            FileName = "nba2br4q.webp",
                            ProductID = 6
                        },
                        new
                        {
                            Id = 9,
                            FileName = "3dfphy25.webp",
                            ProductID = 7
                        },
                        new
                        {
                            Id = 10,
                            FileName = "dhlyzh3z.webp",
                            ProductID = 8
                        },
                        new
                        {
                            Id = 11,
                            FileName = "2kvkadjd.webp",
                            ProductID = 9
                        },
                        new
                        {
                            Id = 12,
                            FileName = "vmdgv0yz.webp",
                            ProductID = 9
                        },
                        new
                        {
                            Id = 13,
                            FileName = "odxrwtki.webp",
                            ProductID = 9
                        },
                        new
                        {
                            Id = 14,
                            FileName = "d2fls0jh.webp",
                            ProductID = 10
                        },
                        new
                        {
                            Id = 15,
                            FileName = "zuigad2q.webp",
                            ProductID = 11
                        },
                        new
                        {
                            Id = 16,
                            FileName = "eb3v2agw.webp",
                            ProductID = 11
                        },
                        new
                        {
                            Id = 17,
                            FileName = "p0ftdyxl.webp",
                            ProductID = 11
                        },
                        new
                        {
                            Id = 18,
                            FileName = "yimi12em.webp",
                            ProductID = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "9cc53335-b1c7-4c0b-8aa1-3811bbb0f6c0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "6dcabc58-8c5c-4231-9a66-02c038da7429",
                            ConcurrencyStamp = "3a44dc59-d93e-4c19-ac11-1fa4da7c6db8",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "76251a37-7bb0-4f6a-80bd-c454effb7285",
                            ConcurrencyStamp = "7a9e1575-bf6e-4ee1-87df-442c4aa5bee0",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("App.Models.Classes.Class", b =>
                {
                    b.HasOne("App.Models.Classes.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("App.Models.Classes.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Instructor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("App.Models.Payments.Payment", b =>
                {
                    b.HasOne("App.Models.Payments.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("App.Models.AppUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID");

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Payments.PaymentDetail", b =>
                {
                    b.HasOne("App.Models.Payments.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Models.Payments.SignupClass", b =>
                {
                    b.HasOne("App.Models.Classes.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Payments.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.AppUser", "User")
                        .WithMany("SignupClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Payments.SignupMembership", b =>
                {
                    b.HasOne("App.Models.Memberships.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Payments.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.AppUser", "User")
                        .WithMany("SignupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Products.Product", b =>
                {
                    b.HasOne("App.Models.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("App.Models.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Models.Products.ProductPhoto", b =>
                {
                    b.HasOne("App.Models.Products.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("App.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("App.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("App.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Models.AppUser", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SignupClasses");

                    b.Navigation("SignupMemberships");
                });

            modelBuilder.Entity("App.Models.Products.Product", b =>
                {
                    b.Navigation("ProductPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
